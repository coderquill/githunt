{"ast":null,"code":"var _jsxFileName = \"/home/rupali/projects/githunt/ghunt/src/feed.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Box, Flex, SimpleGrid, Button } from \"@chakra-ui/core\";\nimport { PageHeader } from './components/page-header';\nimport { GroupTitle } from './components/group-title';\nimport { Filters } from './components/filters';\nimport { Repo } from './components/repo';\nimport { Loader } from './components/page-loader';\nimport moment from 'moment';\nimport useFetch from 'use-http/dist';\n\nfunction transformFilters({\n  language,\n  startDate,\n  endDate\n}) {\n  const transformedFilters = {};\n  const languageQuery = language ? `language:${language} ` : \"\";\n  const dateQuery = `created:${startDate}..${endDate}`;\n  transformedFilters.q = languageQuery + dateQuery;\n  transformedFilters.sort = \"stars\";\n  transformedFilters.order = 'desc';\n  return transformedFilters;\n}\n\nexport function Feed() {\n  const {\n    loading,\n    error,\n    get\n  } = useFetch('https://api.github.com');\n  const [viewType, setViewType] = useState('grid');\n  const [dateJump, setDateJump] = useState('day');\n  const [language, setLanguage] = useState();\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState(moment().subtract(1, 'day').format());\n  const [repositories, setRepositories] = useState([]);\n  useEffect(() => {\n    const endDate = moment().subtract(1, 'day').format();\n    const startDate = moment(endDate).subtract(1, dateJump).format();\n    setEndDate(endDate);\n    setStartDate(startDate);\n    setRepositories([]);\n  }, [dateJump, language]);\n  useEffect(() => {\n    if (!startDate) {\n      return;\n    }\n\n    const filters = transformFilters({\n      language,\n      startDate,\n      endDate\n    });\n    const filtersQuery = new URLSearchParams(filters).toString();\n    get(`/search/repositories?${filtersQuery}`).then(res => {\n      //reposirories has an object : {startDate, endDate, items:[](array of objects)}\n      //console.log(\"res.item\"+JSON.stringify(res.data.items));\n      setRepositories([...repositories, {\n        startDate,\n        endDate,\n        items: res.data.items\n      }]); //console.log(\"repos\"+JSON.stringify(repositories));\n    });\n  }, [startDate]);\n  return /*#__PURE__*/React.createElement(Box, {\n    maxWidth: \"1200px\",\n    mx: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PageHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), repositories.length === 0 && loading && /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 55\n    }\n  }), /*#__PURE__*/React.createElement(Flex, {\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    mb: \"25px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(GroupTitle, {\n    startDate: startDate,\n    endDate: endDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Filters, {\n    viewType: viewType,\n    onViewChange: setViewType,\n    dateJump: dateJump,\n    onDateJumpChange: setDateJump,\n    language: language,\n    onLanguageChange: setLanguage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  })), repositories.map((repoGroup, counter) => {\n    const groupTitle = counter > 0 && /*#__PURE__*/React.createElement(Flex, {\n      align: \"center\",\n      justify: \"center\",\n      mx: \"30px\",\n      my: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(GroupTitle, {\n      startDate: repoGroup.startDate,\n      endDate: repoGroup.endDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }\n    }));\n    return /*#__PURE__*/React.createElement(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, groupTitle, /*#__PURE__*/React.createElement(SimpleGrid, {\n      columns: viewType === 'list' ? 1 : 3,\n      spacing: \"15px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }\n    }, repoGroup.items.map(repo => /*#__PURE__*/React.createElement(Repo, {\n      isListView: viewType === 'list' ? true : false,\n      repo: repo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 33\n      }\n    }))));\n  }), /*#__PURE__*/React.createElement(Flex, {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    mt: \"20px\",\n    mb: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    isLoading: loading,\n    onClick: () => {\n      setEndDate(startDate);\n      setStartDate(moment(startDate).subtract(1, dateJump).format());\n    },\n    variantColor: \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, \"Load next group\")));\n}","map":{"version":3,"sources":["/home/rupali/projects/githunt/ghunt/src/feed.js"],"names":["React","useState","useEffect","Box","Flex","SimpleGrid","Button","PageHeader","GroupTitle","Filters","Repo","Loader","moment","useFetch","transformFilters","language","startDate","endDate","transformedFilters","languageQuery","dateQuery","q","sort","order","Feed","loading","error","get","viewType","setViewType","dateJump","setDateJump","setLanguage","setStartDate","setEndDate","subtract","format","repositories","setRepositories","filters","filtersQuery","URLSearchParams","toString","then","res","items","data","length","map","repoGroup","counter","groupTitle","repo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Box, Flex, SimpleGrid, Button } from \"@chakra-ui/core\";\nimport { PageHeader } from './components/page-header';\nimport { GroupTitle } from './components/group-title';\nimport { Filters } from './components/filters';\nimport { Repo } from './components/repo';\nimport { Loader } from './components/page-loader';\nimport moment from 'moment';\nimport useFetch from 'use-http/dist';\n\nfunction transformFilters({ language, startDate, endDate }) {\n    const transformedFilters = {};\n    const languageQuery = language ? `language:${language} ` : \"\";\n    const dateQuery = `created:${startDate}..${endDate}`;\n\n    transformedFilters.q = languageQuery + dateQuery;\n    transformedFilters.sort = \"stars\";\n    transformedFilters.order = 'desc';\n\n    return transformedFilters;\n}\n\n\nexport function Feed() {\n\n    const { loading, error, get } = useFetch('https://api.github.com');\n\n    const [viewType, setViewType] = useState('grid');\n    const [dateJump, setDateJump] = useState('day');\n    const [language, setLanguage] = useState();\n\n    const [startDate, setStartDate] = useState('');\n    const [endDate, setEndDate] = useState(moment().subtract(1, 'day').format());\n\n    const [repositories, setRepositories] = useState([]);\n\n    useEffect(() => {\n        const endDate = moment().subtract(1, 'day').format();\n        const startDate = moment(endDate).subtract(1, dateJump).format();\n\n        setEndDate(endDate);\n        setStartDate(startDate);\n\n        setRepositories([]);\n\n    }, [dateJump, language]);\n\n    useEffect(() => {\n        if (!startDate) {\n            return;\n        }\n\n        const filters = transformFilters({ language, startDate, endDate });\n        const filtersQuery = new URLSearchParams(filters).toString();\n\n\n\n        get(`/search/repositories?${filtersQuery}`).then((res) => {\n            //reposirories has an object : {startDate, endDate, items:[](array of objects)}\n            //console.log(\"res.item\"+JSON.stringify(res.data.items));\n            setRepositories([...repositories, { startDate, endDate, items: res.data.items }]);\n            //console.log(\"repos\"+JSON.stringify(repositories));\n        });\n    }, [startDate]);\n\n    return (\n        <Box maxWidth='1200px' mx='auto'>\n            <PageHeader />\n            { repositories.length === 0 && loading && <Loader/> }\n            <Flex alignItems='center' justifyContent='space-between' mb='25px'>\n                <GroupTitle\n                    startDate={startDate}\n                    endDate={endDate}\n                />\n                <Filters\n                    viewType={viewType}\n                    onViewChange={setViewType}\n                    dateJump={dateJump}\n                    onDateJumpChange={setDateJump}\n                    language={language}\n                    onLanguageChange={setLanguage}\n                />\n            </Flex>\n\n            {repositories.map((repoGroup, counter: number) => {\n                const groupTitle = counter > 0 && (\n                    <Flex align=\"center\" justify=\"center\" mx='30px' my='30px'>\n                        <GroupTitle\n                            startDate={repoGroup.startDate}\n                            endDate={repoGroup.endDate}\n                        />\n                    </Flex>\n\n\n                )\n                return (\n                    <Box>\n                        {groupTitle}\n                        <SimpleGrid columns={viewType === 'list' ? 1 : 3} spacing='15px'>\n                            {repoGroup.items.map(repo =>\n                                <Repo isListView={viewType === 'list' ? true : false} repo={repo} />\n                            )}\n                        </SimpleGrid>\n                    </Box>\n\n                );\n            })}\n\n\n            <Flex alignItems='center' justifyContent='center' mt='20px' mb='20px'>\n                <Button isLoading={loading} onClick={() => {\n                    setEndDate(startDate);\n                    setStartDate(moment(startDate).subtract(1, dateJump).format());\n                }} variantColor='blue'>Load next group</Button>\n            </Flex>\n        </Box>\n    );\n}"]},"metadata":{},"sourceType":"module"}