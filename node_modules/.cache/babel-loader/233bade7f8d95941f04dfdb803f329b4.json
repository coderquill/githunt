{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar HTTPMethod;\n\n(function (HTTPMethod) {\n  HTTPMethod[\"DELETE\"] = \"DELETE\";\n  HTTPMethod[\"GET\"] = \"GET\";\n  HTTPMethod[\"HEAD\"] = \"HEAD\";\n  HTTPMethod[\"OPTIONS\"] = \"OPTIONS\";\n  HTTPMethod[\"PATCH\"] = \"PATCH\";\n  HTTPMethod[\"POST\"] = \"POST\";\n  HTTPMethod[\"PUT\"] = \"PUT\";\n})(HTTPMethod = exports.HTTPMethod || (exports.HTTPMethod = {})); // https://www.apollographql.com/docs/react/api/react-apollo/#optionsfetchpolicy\n\n\nvar CachePolicies;\n\n(function (CachePolicies) {\n  /**\n   * By default we use this cachePolicy which has 3 phases.\n   * Let's say our cache becomes `stale after` 30 seconds and\n   * it becomes `truly stale after` another 30 seconds.\n   * This says, after 30 seconds the cached data is `stale`. Then\n   * between 31-60 seconds we pull from cache but in the background\n   * (non-blocking) we fetch the data again, update the cache, and\n   * trigger a rerender once we have the new data. After 60 seconds\n   * we are `truly stale` and we fire a blocking request.\n   */\n  CachePolicies[\"SWR\"] = \"stale-while-revalidate\";\n  /**\n   * We always try reading data\n   * from your cache first. If all the data needed to fulfill\n   * your query is in the cache then that data will be returned.\n   * useFetch will only fetch from the network if a cached result\n   * is not available. This fetch policy aims to minimize the number\n   * of network requests sent when rendering your component.\n   */\n\n  CachePolicies[\"CACHE_FIRST\"] = \"cache-first\";\n  /**\n   * This fetch policy will have useFetch first trying to read data\n   * from your cache. If all the data needed to fulfill your query\n   * is in the cache then that data will be returned. However,\n   * regardless of whether or not the full data is in your cache\n   * this fetchPolicy will always execute query with the network\n   * interface unlike cache-first which will only execute your query\n   * if the query data is not in your cache. This fetch policy optimizes\n   * for users getting a quick response while also trying to keep\n   * cached data consistent with your server data at the cost of extra\n   * network requests.\n   */\n\n  CachePolicies[\"CACHE_AND_NETWORK\"] = \"cache-and-network\";\n  /**\n   * This fetch policy will never return your initial data from the\n   * cache. Instead it will always make a request using your network\n   * interface to the server. This fetch policy optimizes for data\n   * consistency with the server, but at the cost of an instant response\n   * to the user when one is available.\n   */\n\n  CachePolicies[\"NETWORK_ONLY\"] = \"network-only\";\n  /**\n   * This fetch policy will never execute a query using your network\n   * interface. Instead it will always try reading from the cache. If the\n   * data for your query does not exist in the cache then an error will be\n   * thrown. This fetch policy allows you to only interact with data in\n   * your local client cache without making any network requests which\n   * keeps your component fast, but means your local data might not be\n   * consistent with what is on the server.\n   */\n\n  CachePolicies[\"CACHE_ONLY\"] = \"cache-only\";\n  /**\n   * This fetch policy will never return your initial data from the cache.\n   * Instead it will always make a request using your network interface to\n   * the server. Unlike the network-only policy, it also will not write\n   * any data to the cache after the query completes.\n   */\n\n  CachePolicies[\"NO_CACHE\"] = \"no-cache\";\n  CachePolicies[\"EXACT_CACHE_AND_NETWORK\"] = \"exact-cache-and-network\";\n})(CachePolicies = exports.CachePolicies || (exports.CachePolicies = {}));","map":{"version":3,"sources":["../src/types.ts"],"names":[],"mappings":";;;;;AAGA,IAAY,UAAZ;;AAAA,CAAA,UAAY,UAAZ,EAAsB;AACpB,EAAA,UAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA,EAAA,UAAA,CAAA,KAAA,CAAA,GAAA,KAAA;AACA,EAAA,UAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACA,EAAA,UAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,UAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACA,EAAA,UAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACA,EAAA,UAAA,CAAA,KAAA,CAAA,GAAA,KAAA;AACD,CARD,EAAY,UAAU,GAAV,OAAA,CAAA,UAAA,KAAA,OAAA,CAAA,UAAA,GAAU,EAAV,CAAZ,E,CAUA;;;AACA,IAAY,aAAZ;;AAAA,CAAA,UAAY,aAAZ,EAAyB;AACvB;;;;;;;;;;AAUA,EAAA,aAAA,CAAA,KAAA,CAAA,GAAA,wBAAA;AACA;;;;;;;;;AAQA,EAAA,aAAA,CAAA,aAAA,CAAA,GAAA,aAAA;AACA;;;;;;;;;;;;;AAYA,EAAA,aAAA,CAAA,mBAAA,CAAA,GAAA,mBAAA;AACA;;;;;;;;AAOA,EAAA,aAAA,CAAA,cAAA,CAAA,GAAA,cAAA;AACA;;;;;;;;;;AASA,EAAA,aAAA,CAAA,YAAA,CAAA,GAAA,YAAA;AACA;;;;;;;AAMA,EAAA,aAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA,EAAA,aAAA,CAAA,yBAAA,CAAA,GAAA,yBAAA;AACD,CA5DD,EAAY,aAAa,GAAb,OAAA,CAAA,aAAA,KAAA,OAAA,CAAA,aAAA,GAAa,EAAb,CAAZ","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar HTTPMethod;\n(function (HTTPMethod) {\n    HTTPMethod[\"DELETE\"] = \"DELETE\";\n    HTTPMethod[\"GET\"] = \"GET\";\n    HTTPMethod[\"HEAD\"] = \"HEAD\";\n    HTTPMethod[\"OPTIONS\"] = \"OPTIONS\";\n    HTTPMethod[\"PATCH\"] = \"PATCH\";\n    HTTPMethod[\"POST\"] = \"POST\";\n    HTTPMethod[\"PUT\"] = \"PUT\";\n})(HTTPMethod = exports.HTTPMethod || (exports.HTTPMethod = {}));\n// https://www.apollographql.com/docs/react/api/react-apollo/#optionsfetchpolicy\nvar CachePolicies;\n(function (CachePolicies) {\n    /**\n     * By default we use this cachePolicy which has 3 phases.\n     * Let's say our cache becomes `stale after` 30 seconds and\n     * it becomes `truly stale after` another 30 seconds.\n     * This says, after 30 seconds the cached data is `stale`. Then\n     * between 31-60 seconds we pull from cache but in the background\n     * (non-blocking) we fetch the data again, update the cache, and\n     * trigger a rerender once we have the new data. After 60 seconds\n     * we are `truly stale` and we fire a blocking request.\n     */\n    CachePolicies[\"SWR\"] = \"stale-while-revalidate\";\n    /**\n     * We always try reading data\n     * from your cache first. If all the data needed to fulfill\n     * your query is in the cache then that data will be returned.\n     * useFetch will only fetch from the network if a cached result\n     * is not available. This fetch policy aims to minimize the number\n     * of network requests sent when rendering your component.\n     */\n    CachePolicies[\"CACHE_FIRST\"] = \"cache-first\";\n    /**\n     * This fetch policy will have useFetch first trying to read data\n     * from your cache. If all the data needed to fulfill your query\n     * is in the cache then that data will be returned. However,\n     * regardless of whether or not the full data is in your cache\n     * this fetchPolicy will always execute query with the network\n     * interface unlike cache-first which will only execute your query\n     * if the query data is not in your cache. This fetch policy optimizes\n     * for users getting a quick response while also trying to keep\n     * cached data consistent with your server data at the cost of extra\n     * network requests.\n     */\n    CachePolicies[\"CACHE_AND_NETWORK\"] = \"cache-and-network\";\n    /**\n     * This fetch policy will never return your initial data from the\n     * cache. Instead it will always make a request using your network\n     * interface to the server. This fetch policy optimizes for data\n     * consistency with the server, but at the cost of an instant response\n     * to the user when one is available.\n     */\n    CachePolicies[\"NETWORK_ONLY\"] = \"network-only\";\n    /**\n     * This fetch policy will never execute a query using your network\n     * interface. Instead it will always try reading from the cache. If the\n     * data for your query does not exist in the cache then an error will be\n     * thrown. This fetch policy allows you to only interact with data in\n     * your local client cache without making any network requests which\n     * keeps your component fast, but means your local data might not be\n     * consistent with what is on the server.\n     */\n    CachePolicies[\"CACHE_ONLY\"] = \"cache-only\";\n    /**\n     * This fetch policy will never return your initial data from the cache.\n     * Instead it will always make a request using your network interface to\n     * the server. Unlike the network-only policy, it also will not write\n     * any data to the cache after the query completes.\n     */\n    CachePolicies[\"NO_CACHE\"] = \"no-cache\";\n    CachePolicies[\"EXACT_CACHE_AND_NETWORK\"] = \"exact-cache-and-network\";\n})(CachePolicies = exports.CachePolicies || (exports.CachePolicies = {}));\n//# sourceMappingURL=types.js.map"]},"metadata":{},"sourceType":"script"}