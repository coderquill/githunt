{"version":3,"sources":["components/brand.js","components/page-header.js","components/group-title.js","components/filters.js","components/repo.js","components/page-loader.js","feed.js","app.js","index.js"],"names":["Brand","Flex","alignItems","Image","src","Box","ml","Heading","fontSize","Text","color","PageHeader","justifyContent","pt","Stack","isInline","Button","as","href","target","leftIcon","FaGithub","FaLinkedin","variantColor","RiStarSmileLine","GroupTitle","startDate","endDate","startMoment","moment","endMoment","fontWeight","fromNow","format","Filters","props","onViewChange","viewType","onDateJumpChange","dateJump","language","onLanguageChange","Select","value","onChange","e","languages","map","key","title","Menu","textAlign","w","bg","borderWidth","px","_focus","boxShadow","Icon","name","mr","textTransform","onClick","spacing","borderBottomWidth","rounded","h","roundedRight","FaTable","roundedLeft","FaList","Repo","isListView","repo","p","flex","flexDir","mb","owner","avatar_url","login","html_url","Link","created_at","description","cursor","variant","_hover","textDecoration","iconSpacing","stargazers_count","GoRepoForked","forks_count","GoIssueOpened","open_issues_count","Loader","position","left","right","bottom","tom","zIndex","Spinner","thickness","Feed","useFetch","loading","get","error","useState","setViewType","setDateJump","setLanguage","setStartDate","subtract","setEndDate","repositories","setRepositories","useEffect","filters","transformedFilters","languageQuery","dateQuery","q","sort","order","transformFilters","filtersQuery","URLSearchParams","toString","then","res","items","data","maxWidth","mx","length","repoGroup","counter","groupTitle","align","justify","my","SimpleGrid","columns","mt","isLoading","App","width","minHeight","ReactDOM","render","StrictMode","ThemeProvider","CSSReset","document","getElementById"],"mappings":"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","file":"static/js/main.02e89e4a.chunk.js","sourcesContent":["import React from 'react';\nimport { Box,  Image, Flex,  Heading, Text } from \"@chakra-ui/core\";\n\nexport function Brand() {\n    return (\n        <Flex alignItems='center'>\n            <Image src='https://img.icons8.com/clouds/2x/github.png' />\n            <Box ml='10px'>\n                <Heading fontSize='25px'>TopStar</Heading>\n                <Text color='gray.600'>Top starred repositories on GitHub</Text>\n            </Box>\n        </Flex>\n    );\n}\n","import React from 'react';\nimport { Brand } from './brand';\nimport { Button, Flex, Stack, } from \"@chakra-ui/core\";\nimport { FaGithub,  FaLinkedin} from 'react-icons/fa';\nimport { RiStarSmileLine} from 'react-icons/ri';\n\nexport function PageHeader() {\n    return (\n        <Flex justifyContent='space-between' alignItems='center' pt='15px'>\n            <Brand />\n            <Stack isInline >\n                <Button as=\"a\" href=\"https://github.com/coderquill/topstar\" target=\"_blank\" leftIcon={FaGithub}>View Source</Button>\n                <Button as=\"a\" href=\"https://linkedin.com/in/rupali-kavale\" target=\"_blank\" leftIcon={FaLinkedin} variantColor='blue'>LinkedIn</Button>  \n                <Button as=\"a\" href=\"https://github.com/coderquill\" target=\"_blank\" leftIcon={RiStarSmileLine} variantColor='red'>About Me</Button>           \n            </Stack>\n        </Flex>\n    );\n}\n","import React from 'react';\nimport { Text } from \"@chakra-ui/core\";\nimport moment from 'moment';\n\n\nexport function GroupTitle({startDate, endDate}) {\n    if(!startDate || !endDate){\n        return null;\n    }\n\n    const startMoment = moment(startDate)\n    const endMoment = moment(endDate);\n\n    return (\n        <Text fontSize='24px' fontWeight={700}>\n            {startMoment.fromNow() }{\" \"} <Text fontSize='15px' fontWeight={500} color='gray.500' ml='5px' as='span'>{startMoment.format(\"MMMM D, YYYY\")} - {endMoment.format(\"MMMM D, YYYY\")} </Text>\n        </Text>\n    );\n}\n","import React from \"react\"; \nimport { Box, Icon, Select, Button, Menu, MenuButton, MenuList, MenuItem, Stack } from \"@chakra-ui/core\";\nimport languages from '../data/languages.json';\nimport { FaTable, FaList } from \"react-icons/fa\";\n\nexport function Filters(props) {\n\n    const {onViewChange, viewType, onDateJumpChange, dateJump, language, onLanguageChange } = props;\n    \n    \n    \n    return (\n        <Stack isInline>\n            <Select value={language} onChange={(e)=>onLanguageChange(e.target.value)}>\n                {languages.map((language) => (\n                    <option key={language.value} value={language.value}>{language.title}</option>\n                ))}\n            </Select>\n            <Menu>\n                <MenuButton \n                textAlign='left'\n                w = '250px'\n                justifyContent = 'flex-start'\n                as={Button} \n                bg='white' \n                borderWidth={1} \n                px='15px' \n                fontWeight={400} \n                _focus={{boxShadow:'none'}}\n                >\n                <Icon name='calendar' mr={3}/>\n                <Box as='span' textTransform=\"capitalize\">{dateJump}</Box>\n                </MenuButton>\n                <MenuList>\n                    <MenuItem onClick={()=>onDateJumpChange('day')}>Daily</MenuItem>\n                    <MenuItem onClick={()=>onDateJumpChange('week')} >Weekly</MenuItem>\n                    <MenuItem onClick={()=>onDateJumpChange('month')}>Monthly</MenuItem>\n                    <MenuItem onClick={()=>onDateJumpChange('year')}>Yearly</MenuItem>\n                </MenuList>\n            </Menu>\n\n            <Stack isInline spacing={0} borderBottomWidth={1} rounded='5px' alignItems='center' ml='10px'>\n                <Button h='100%'\n                   // onClick={() => setViewType('grid') }\n                    onClick={()=>onViewChange('grid')}\n                    fontWeight={400}\n                    roundedRight={0}\n                    bg = {viewType === 'grid' ? 'gray.200' : 'white'}\n                    leftIcon={FaTable}\n                >\n                Grid\n                </Button>\n                <Button h='100%' \n                    onClick={() => onViewChange('list') }\n                    fontWeight={400}\n                    roundedLeft={0}\n                     bg = {viewType === 'list' ? 'gray.200' : 'white'}\n                    leftIcon={FaList}\n                >\n                 List\n                </Button>\n            </Stack>\n\n        </Stack>\n    );\n}\n","import React from 'react';\nimport { Box, Flex, Heading, Image, Text, Link, Stack, Button } from '@chakra-ui/core';\nimport { GoIssueOpened, GoRepoForked } from 'react-icons/go';\nimport moment from 'moment';\n\nexport function Repo(props) {\n\n    const { isListView = false, repo } = props;\n   // console.log(isListView);\n\n    return (\n\n        <Flex borderWidth={1} bg='white' p='15px' rounded='5px' alignItems='center' >\n            <Flex flex={1} flexDir='column'>\n                {!isListView && (\n                    <Flex mb='15px'>\n                        <Image\n                            src={repo.owner.avatar_url}\n                            w={'35px'}\n                            h={'35px'}\n                            rounded='5px'\n                        />\n                        <Box ml='10px'>\n                            <Heading fontSize='16px'>{repo.owner.login}</Heading>\n                            <Text fontSize='13px'>View profile</Text>\n                        </Box>\n                    </Flex>\n                )}\n\n                <Box mb='15px'>\n                    <Box mb='10px'>\n                        <Flex fontSize='19px' fontWeight={700} color='purple.700' mb='3px'>\n                            {isListView && (\n                                <>\n                                    <Text as='a'\n                                        href={repo.owner.html_url}\n                                        target='_blank' >\n                                         {repo.owner.login}\n                            </Text>\n                            &nbsp;/&nbsp;\n                            </>\n                            )}\n                            <Text\n                                as=\"a\"\n                                href={repo.html_url}\n                                target=\"_blank\"\n                            >\n                               {repo.name}\n                        </Text>\n                        </Flex>\n                        <Text fontSize='14px' color='gray.600'>\n                            Built by &middot;{\" \"}\n                            <Link fontWeight={600}\n                                href= {repo.owner.html_url}\n                                target='_blank'\n                            > {repo.owner.login}\n                        </Link>{\" \"}\n                        &middot; {moment(repo.created_at).format(\"MMMM D, YYYY\")}\n                        </Text>\n                    </Box>\n                    <Text fontSize='14px' color='gray.900'>\n                         {repo.description}\n                    </Text>\n                </Box>\n\n                <Stack isInline spacing='10px'>\n                    <Button as='a' href={`${repo.html_url}/stargazers`} cursor='pointer' leftIcon='star' variant='link' fontSize='14px' _hover={{ textDecoration: 'none' }} iconSpacing='4px' >{repo.stargazers_count}</Button>\n                    <Button as='a' cursor='pointer' leftIcon={GoRepoForked} variant='link' fontSize='14px' _hover={{ textDecoration: 'none' }} iconSpacing='4px' >{repo.forks_count}</Button>\n                    <Button as='a' cursor='pointer' leftIcon={GoIssueOpened} variant='link' fontSize='14px' _hover={{ textDecoration: 'none' }} iconSpacing='4px' >{repo.open_issues_count}</Button>\n                </Stack>\n            </Flex>\n\n            {isListView && (\n                <Image\n                    src={repo.owner.avatar_url}\n                    w={'185px'}\n                    h={'185px'}\n                    rounded='100%'\n                />\n            )}\n\n        </Flex>\n\n    );\n\n}\n","import React from 'react';\nimport { Flex, Spinner } from '@chakra-ui/core';\n\n\nexport const Loader = () => (\n    <Flex\n        position=\"fixed\"\n        left={0}\n        right={0}\n        bottom={0}\n        tom={0}\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        bg=\"white\"\n        zIndex={999}\n    >\n        <Spinner\n            thickness=\"4px\"\n            color=\"blue.500\"\n        />\n\n    </Flex>\n);\n\n","import React, { useState, useEffect } from 'react';\nimport { Box, Flex, SimpleGrid, Button } from \"@chakra-ui/core\";\nimport { PageHeader } from './components/page-header';\nimport { GroupTitle } from './components/group-title';\nimport { Filters } from './components/filters';\nimport { Repo } from './components/repo';\nimport { Loader } from './components/page-loader';\nimport moment from 'moment';\nimport useFetch from 'use-http/dist';\n\nfunction transformFilters({ language, startDate, endDate }) {\n    const transformedFilters = {};\n    const languageQuery = language ? `language:${language} ` : \"\";\n    const dateQuery = `created:${startDate}..${endDate}`;\n\n    transformedFilters.q = languageQuery + dateQuery;\n    transformedFilters.sort = \"stars\";\n    transformedFilters.order = 'desc';\n\n    return transformedFilters;\n}\n\n\nexport function Feed() {\n\n    const { loading, error, get } = useFetch('https://api.github.com');\n\n    const [viewType, setViewType] = useState('grid');\n    const [dateJump, setDateJump] = useState('day');\n    const [language, setLanguage] = useState();\n\n    const [startDate, setStartDate] = useState('');\n    const [endDate, setEndDate] = useState(moment().subtract(1, 'day').format());\n\n    const [repositories, setRepositories] = useState([]);\n\n    useEffect(() => {\n        const endDate = moment().subtract(1, 'day').format();\n        const startDate = moment(endDate).subtract(1, dateJump).format();\n\n        setEndDate(endDate);\n        setStartDate(startDate);\n\n        setRepositories([]);\n\n    }, [dateJump, language]);\n\n    useEffect(() => {\n        if (!startDate) {\n            return;\n        }\n\n        const filters = transformFilters({ language, startDate, endDate });\n        const filtersQuery = new URLSearchParams(filters).toString();\n\n\n\n        get(`/search/repositories?${filtersQuery}`).then((res) => {\n            //reposirories has an object : {startDate, endDate, items:[](array of objects)}\n            //console.log(\"res.item\"+JSON.stringify(res.data.items));\n            setRepositories([...repositories, { startDate, endDate, items: res.data.items }]);\n            //console.log(\"repos\"+JSON.stringify(repositories));\n        });\n    }, [startDate]);\n\n    return (\n        <Box maxWidth='1200px' mx='auto'>\n            <PageHeader />\n            { repositories.length === 0 && loading && <Loader/> }\n            <Flex alignItems='center' justifyContent='space-between' mb='25px'>\n                <GroupTitle\n                    startDate={startDate}\n                    endDate={endDate}\n                />\n                <Filters\n                    viewType={viewType}\n                    onViewChange={setViewType}\n                    dateJump={dateJump}\n                    onDateJumpChange={setDateJump}\n                    language={language}\n                    onLanguageChange={setLanguage}\n                />\n            </Flex>\n\n            {repositories.map((repoGroup, counter: number) => {\n                const groupTitle = counter > 0 && (\n                    <Flex align=\"center\" justify=\"center\" mx='30px' my='30px'>\n                        <GroupTitle\n                            startDate={repoGroup.startDate}\n                            endDate={repoGroup.endDate}\n                        />\n                    </Flex>\n\n\n                )\n                return (\n                    <Box>\n                        {groupTitle}\n                        <SimpleGrid columns={viewType === 'list' ? 1 : 3} spacing='15px'>\n                            {repoGroup.items.map(repo =>\n                                <Repo isListView={viewType === 'list' ? true : false} repo={repo} />\n                            )}\n                        </SimpleGrid>\n                    </Box>\n\n                );\n            })}\n\n\n            <Flex alignItems='center' justifyContent='center' mt='20px' mb='20px'>\n                <Button  onClick={() => {\n                    setEndDate(startDate);\n                    setStartDate(moment(startDate).subtract(1, dateJump).format());\n                }} isLoading = {loading} variantColor='blue'>Load next group</Button>\n            </Flex>\n        </Box>\n    );\n}","import React from 'react';\nimport { Box } from '@chakra-ui/core';\nimport {Feed} from './feed';\n\nexport function App() {\n    return (\n        <Box width='100vw' minHeight={'100vh'} bg = 'gray.100'>\n            <Feed/>\n\n        </Box>\n    );\n\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CSSReset, ThemeProvider } from '@chakra-ui/core';\nimport { App } from \"./app\";;\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider>\n      <CSSReset />\n      <App/>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}